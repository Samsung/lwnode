#!/usr/bin/env python

from __future__ import print_function
import ast
import optparse
import os
import pprint
import subprocess
import sys

script_dir = os.path.dirname(__file__)
ROOT_DIR = os.path.abspath(script_dir)
NODE_DIR = os.path.join(ROOT_DIR, 'deps', 'lwnode')


def print_verbose(x, verbose=True):
  if not verbose:
    return
  if type(x) is str:
    print(x)
  else:
    pprint.pprint(x, indent=2)


def info(msg):
  prefix = '\033[1m\033[32mINFO\033[0m' if os.isatty(1) else 'INFO'
  print('%s: %s' % (prefix, msg))


def b(value):
  '''Returns the string 'true' if value is truthy, 'false' otherwise.'''
  return 'true' if value else 'false'


def n(value):
  '''Returns the string '1' if value is truthy, '0' otherwise.'''
  return '1' if value else '0'


def read_node_config_gypi(config_gypi_path):
  with open(config_gypi_path, 'r') as f:
    content = f.read()
    return ast.literal_eval(content)


def lwnode_gyp_opts(opts):
  '''Returns GYP options.'''
  args = []

  # definitions (used: node)
  args += ['-Dnode_core_target_name=lwnode']
  args += ['-Dnode_lib_target_name=liblwnode']
  args += ['-Dnode_obj_dir=obj/deps/lwnode']
  args += ['-Dlwnode_jsengine_path=' + ROOT_DIR]

  # definitions (used: node && escargot)
  args += ['-Dexternal_builtins=' + b(not opts.without_external_builtins)]
  args += ['-Denable_reload_script=' + b(not opts.without_reload_script)]

  # definitions (used: shim && escargot)
  args += ['-Dtarget_os=' + ('tizen' if opts.tizen else 'linux')]
  args += ['-Dprofile=' + str(opts.profile)] if opts.tizen else []

  # definitions (used: escargot)
  args += ['-Descargot_build_mode=' + ('debug' if opts.debug else 'release')]
  args += ['-Descargot_lib_type=' + str(opts.escargot_lib_type)]
  args += ['-Descargot_threading=' + n(not opts.without_escargot_threading)]
  args += ['-Descargot_debugger=' + n(opts.escargot_debugger)]

  return args


def main(opts):
  # 1. create `NODE_DIR/config.gypi`
  configure_path = os.path.join(NODE_DIR, 'configure.py')

  node_opts = "--lwnode --skip-node-gyp --ninja \
    --dest-os=linux \
    --without-bundled-v8 --without-node-code-cache \
    --without-node-snapshot --without-inspector \
    --without-npm --with-intl=none --shared-zlib".split()
  node_opts += ['--debug', '--debug-node'] if opts.debug else []
  node_opts += opts.node_more_opts

  print_verbose('[ ' + ', '.join(["'%s'" % str(x) for x in node_opts]) + ']',
                opts.verbose)

  subprocess.check_call([sys.executable, configure_path] + node_opts)

  # 2. rewrite `NODE_DIR/config.gypi` to append the lwnode variables,
  # which are accessible via `process.config` in Node.js JS side.
  # e.g) `console.log(process.config.variables.javascript_engine)`
  config_gypi_path = os.path.join(NODE_DIR, 'config.gypi')
  config = read_node_config_gypi(config_gypi_path)

  o = {}
  o['javascript_engine'] = 'escargot'
  o['lwnode_external_builtin_script'] = b(not opts.without_external_builtins)
  o['lwnode_reload_script'] = b(not opts.without_reload_script)
  v = config['variables']
  v.update(o)

  print_verbose(o, opts.verbose)

  # `gyp_args` is enabled when `NODE_DIR/config.gypi` is created with
  # `--skip-node-gyp`. we remove it since it's given for the next step.
  gyp_args = v['gyp_args']
  del v['gyp_args']

  do_not_edit = '# Do not edit. Generated by the lwnode configure script.\n'
  with open(config_gypi_path, 'w') as f:
    f.write(do_not_edit + pprint.pformat(config, indent=2) + '\n')

  # 3. prepare gyp arguments
  target_os = ('tizen' if opts.tizen else 'linux')
  gen_build_dir = os.path.join(ROOT_DIR, 'out', target_os)
  gyp_args += ['--depth=.']
  gyp_args += ['--generator-output=' + gen_build_dir]
  gyp_args += ['-Goutput_dir=' + gen_build_dir]
  gyp_args += ['-Dcomponent=static_library']
  gyp_args += ['-Dlibrary=static_library']
  gyp_args += ['-I', os.path.join(NODE_DIR, 'common.gypi')]
  gyp_args += ['-I', os.path.join(NODE_DIR, 'config.gypi')]
  gyp_args += lwnode_gyp_opts(opts)
  gyp_args += opts.gyp_more_opts

  # 4. run gyp
  gyp = os.path.join(NODE_DIR, 'tools/gyp/gyp')
  gyp_build_file = 'lwnode.gyp'
  print_verbose([gyp, gyp_build_file, gyp_args], opts.verbose)
  subprocess.check_call([gyp, gyp_build_file] + gyp_args)
  info('configure completed successfully')


def setupCLIOptions(parser):
  lwnode_optgroup = optparse.OptionGroup(
      parser,
      'Lightweight Node.js',
      'Flags that allow you to control LWNode.js build options',
  )

  lwnode_optgroup.add_option(
      '--tizen',
      action='store_true',
      dest='tizen',
      default=False,
      help='Build for Tizen Platform (%default)',
  )

  lwnode_optgroup.add_option(
      '--profile',
      choices=['common', 'tv', 'kiosk'],
      default='common',
      help='Tizen profile: common | tv | kiosk (%default)',
  )

  lwnode_optgroup.add_option(
      '--without-external-builtins',
      action='store_true',
      dest='without_external_builtins',
      default=False,
      help='Disable external builtin scripts (%default)',
  )

  lwnode_optgroup.add_option(
      '--without-reload-script',
      action='store_true',
      dest='without_reload_script',
      default=False,
      help='Disable Escargot script reloading (%default)',
  )

  lwnode_optgroup.add_option(
      '--without-escargot-threading',
      action='store_true',
      dest='without_escargot_threading',
      default=False,
      help='Disable Escargot threading (%default)',
  )

  lwnode_optgroup.add_option(
      '--escargot-lib-type',
      choices=['shared_lib', 'static_lib'],
      default='shared_lib',
      help='shared_lib | static_lib (%default)',
  )

  lwnode_optgroup.add_option(
      '--escargot-debugger',
      action='store_true',
      dest='escargot_debugger',
      default=False,
      help='Enable Escargot debugging (%default)',
  )

  lwnode_optgroup.add_option(
      '--nopt',
      action='append',
      dest='node_more_opts',
      default=[],
      help='Append Node.js options. Can be used multiple times')

  lwnode_optgroup.add_option(
      '--gopt',
      action='append',
      dest='gyp_more_opts',
      default=[],
      help='Append GYP options. Can be used multiple times')

  lwnode_optgroup.add_option(
      '--debug',
      action='store_true',
      dest='debug',
      default=False,
      help='Debug build (%default)',
  )

  lwnode_optgroup.add_option(
      '-v',
      '--verbose',
      action='store_true',
      dest='verbose',
      default=False,
      help='Get more output from this script (%default)',
  )

  parser.add_option_group(lwnode_optgroup)
  return parser


if __name__ == '__main__':
  parser = setupCLIOptions(optparse.OptionParser())
  (options, args) = parser.parse_args()
  sys.exit(main(options))
