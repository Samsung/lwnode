name: Build lwnode
on: [ push ]
jobs:
  build_lwnode:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        profile: [ release ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Checkout Escargot
        run: |
          pushd lwnode/code/escargotshim/deps/escargot
          git submodule update --init third_party
          pushd third_party/wasm/wabt
          patch -p0 --forward -r /dev/null -i ../../../tools/test/wasm-js/wabt_patch
          popd
          popd
      - name: Install Packages
        run: |
          sudo apt update
          sudo apt install -y ninja-build gcc-multilib g++-multilib sed
      - name: Build lwnode
        run: |
          lwnode/build.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: lwnode
          path: out/linux/Release/lwnode

  nodejs_test_x64:
    needs: build_lwnode
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Download lwnode
        uses: actions/download-artifact@v2
        with:
          name: lwnode
          path: out/linux/Release/lwnode
      - name: Run node.js TCs (test.py)
        run: |
          pwd
          tools/test.py -J -p dots --report --time \
          --timeout 240 --repeat 1 \
          --skip-tests=$(sed 's/\s#.*//g' ./test/skip_tests.txt | paste -sd,) \
          --unsupported-tests=$(sed '/#\|^$/d' ./test/skip_features.txt | paste -sd,) \
          test/parallel test/regression

  nodejs_sqlite3_app:
    needs: build_lwnode
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Download lwnode
        uses: actions/download-artifact@v2
        with:
          name: lwnode
          path: lwnode/apps/sqlite3
      - name: Install nodejs
        run: |
          pwd
          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo apt update
          sudo apt install nodejs
      - name: Run sqlite3 test
        run: |
          pushd lwnode/apps/sqlite3
          rm -rf ./node_modules
          npm install
          npm run build:all
          ./lwnode ./sample/index_node.js
          popd

  cctest:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Checkout Escargot
        run: |
          pushd lwnode/code/escargotshim/deps/escargot
          git submodule update --init third_party
          pushd third_party/wasm/wabt
          patch -p0 --forward -r /dev/null -i ../../../tools/test/wasm-js/wabt_patch
          popd
          popd
      - name: Install Packages
        run: |
          sudo apt update
          sudo apt install -y ninja-build gcc-multilib g++-multilib
      - name: Build cctest
        run: |
          lwnode/build-cctest.sh
      - name: Run cctest
        run: |
          out/cctest/out/Debug/cctest
  build_tizen_std:
    runs-on: ubuntu-20.04
    #container:
    #  image: art.sec.samsung.net/circleci-docker/docker-gbs-base:actions
    #  options: --user root --privileged
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        profile: [t70std]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Checkout Escargot
        run: |
          pushd lwnode/code/escargotshim/deps/escargot
          git submodule update --init third_party
          pushd third_party/wasm/wabt
          patch -p0 --forward -r /dev/null -i ../../../tools/test/wasm-js/wabt_patch
          popd
          popd
      - name: Install Packages
        run: |
          echo "deb [trusted=yes] http://download.tizen.org/tools/latest-release/Ubuntu_$(lsb_release -rs)/ /" | \
          sudo tee /etc/apt/sources.list.d/tizen.list > /dev/null
          pwd
          sudo apt update
          sudo apt install -y ninja-build gcc-multilib g++-multilib gbs
      - name: Build Tizen ${{ matrix.profile }}
        run: |
          gbs -c .github/gbs.conf build -A armv7l -P profile.${{ matrix.profile }} --include-all --incremental --define 'lib_type shared'
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tizen_std_${{ matrix.profile }}
          path: /home/runner/GBS-ROOT/${{ matrix.profile }}/local/repos/${{ matrix.profile }}/armv7l/RPMS/
