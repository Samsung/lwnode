version: 2

# Configuration
config: &config
  machine:
    image: art.sec.samsung.net/ci-docker/lws/starfish:latest
  environment:
    no_proxy: 168.219.241.169,168.219.245.245,168.219.244.109

set_proxy: &set_proxy
  run:
    name: Set proxy
    command: curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh

# Submodule
check_submodule_status: &check_submodule_status
  run:
    name: Creating cache-submodule reference
    command: git submodule status | tee ~/cache-submodule

restore_submodule_cache: &restore_submodule_cache
  restore_cache:
    name: Restoring cache-submodule
    key: v3-submodules-{{ checksum "~/cache-submodule" }}

save_submodule_cache: &save_submodule_cache
  save_cache:
    name: Caching submodules
    paths:
      - .git/modules
      - deps/escargot
      - deps/lwnode
    key: v3-submodules-{{ checksum "~/cache-submodule" }}

# node
install_node: &install_node
  run:
    name: Install node
    command: |
      curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
      sudo apt install -y nodejs
      node -v
      npm -version

install_zip: &install_zip
  run:
    name: Install zip
    command: sudo apt install -y zip

show_env_info: &show_env_info
  run:
    name: Environment Information
    command: gcc --version; cmake --version; python --version

# lwnode
build_lwnode: &build_lwnode
  run:
    name: Build lwnode
    command: |
      ./configure.py -v
      ninja -C out/linux/Release lwnode

check_lwnode_status: &check_lwnode_status
  run:
    name: Creating cache-output reference
    command: ls deps | tee ~/cache-output

restore_lwnode_cache: &restore_lwnode_cache
  restore_cache:
    name: Restoring cache-output
    key: v3-lwnode-{{ checksum "~/cache-output" }}

save_lwnode_cache: &save_lwnode_cache
  save_cache:
    name: Caching cache-output
    paths:
      - out/linux/Release
    key: v3-lwnode-{{ checksum "~/cache-output" }}

jobs:
  build_release:
    <<: *config
    steps:
      - *set_proxy
      - *install_zip
      - checkout
      - *check_submodule_status
      - *restore_submodule_cache
      - run: git submodule update --init --recursive
      - *save_submodule_cache
      - *show_env_info
      - *check_lwnode_status
      - *restore_lwnode_cache
      - *build_lwnode
      - *save_lwnode_cache

      - run:
          name: Run node.js TCs (test.py)
          command: |
            pushd $(pwd)/deps/lwnode
            ./tools/test.py \
              -J -p dots --report --time --timeout 240 --repeat 1 \
              --shell=../../out/linux/Release/lwnode \
              --skip-tests=$(sed 's/\s#.*//g' test/skip_tests.txt | paste -sd,) \
              --unsupported-tests=$(sed '/#\|^$/d' test/skip_features.txt | paste -sd,) \
              test/parallel test/regression
            popd
      - run:
          name: Copy outputs
          command: |
            mkdir -p ~/artifacts
            find out/linux/Release -name "lwnode" -o -name "*.so*" -o -name "*.dat" \
              | grep -v "/obj" \
              | xargs cp -t ~/artifacts
      - store_artifacts:
          path: ~/artifacts
          destination: artifacts

  lint:
    <<: *config
    steps:
      - checkout
      - run:
          name: Check tidy
          command: ./tools/check_tidy.py --filter=$(paste -sd, tools/lint-filters.txt)

  cctest:
    <<: *config
    steps:
      - checkout
      - *check_submodule_status
      - *restore_submodule_cache
      - run: git submodule update --init --recursive
      - *save_submodule_cache
      - run: |
          export ROOT=$PWD
          export OUT_PATH=$ROOT/out/cctest
          export ARCH="x64"
          export ASAN=1
          export GYP=deps/lwnode/tools/gyp/gyp
          $GYP ./test/cctest.gyp --depth=. -f ninja \
            --generator-output=$OUT_PATH -Dasan=$ASAN -Descargot_build_mode=debug \
            -Descargot_lib_type=static_lib -Dtarget_arch=$ARCH -Dtarget_os=linux \
            -Denable_experimental=true -Descargot_threading=1 \
            -Descargot_debugger=0
          ninja -C $OUT_PATH/out/Debug cctest
      - run: out/cctest/out/Debug/cctest

  build_tizen_6.5:
    <<: *config
    steps:
      - checkout
      - *check_submodule_status
      - *restore_submodule_cache
      - run: git submodule update --init --recursive
      - *save_submodule_cache
      - run:
          name: Build RPMs
          command: |
            gbs -c packaging/gbs.conf build -A armv7l -P profile.t65std --include-all --incremental
      - run:
          name: Store artifacts
          command: |
            mkdir -p ~/artifacts
            cp ~/GBS-ROOT/t65std/local/repos/t65std/armv7l/RPMS/*.rpm ~/artifacts
      - store_artifacts:
          path: ~/artifacts
          destination: artifacts

  build_tizen_6.5_development:
    <<: *config
    steps:
      - checkout
      - *check_submodule_status
      - *restore_submodule_cache
      - run: git submodule update --init --recursive
      - *save_submodule_cache
      - run:
          name: Build RPMs
          command: |
            gbs -c packaging/gbs.conf build -A armv7l -P profile.t65std --include-all --incremental \
                --define 'feature_mode development' \
                --define 'lib_type static'
      - run:
          name: Store artifacts
          command: |
            mkdir -p ~/artifacts
            cp ~/GBS-ROOT/t65std/local/repos/t65std/armv7l/RPMS/*.rpm ~/artifacts
      - store_artifacts:
          path: ~/artifacts
          destination: artifacts

workflows:
    version: 2
    verify_node:
      jobs:
        - build_release
    verify_lint:
      jobs:
        - lint
    verify_cctest:
      jobs:
        - cctest
    verify_build:
      jobs:
        - build_tizen_6.5
    verify_build_development:
      jobs:
        - build_tizen_6.5_development
